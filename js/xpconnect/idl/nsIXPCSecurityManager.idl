/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[ptr] native nsAXPCNativeCallContextPtr(nsAXPCNativeCallContext);

%{ C++
#include "jspubtd.h"

class nsAXPCNativeCallContext;
%}

interface nsIClassInfo;

[ptr] native JSContextPtr(JSContext);
[ptr] native JSObjectPtr(JSObject);
[ptr] native JSStackFramePtr(JSStackFrame);

[uuid(31431440-f1ce-11d2-985a-006008962422)]
interface nsIXPCSecurityManager : nsISupports
{
    /**
    * These flags are used when calling nsIXPConnect::SetSecurityManager
    */

    const uint32_t HOOK_CREATE_WRAPPER  = 1 << 0;
    const uint32_t HOOK_CREATE_INSTANCE = 1 << 1;
    const uint32_t HOOK_GET_SERVICE     = 1 << 2;
    const uint32_t HOOK_CALL_METHOD     = 1 << 3;
    const uint32_t HOOK_GET_PROPERTY    = 1 << 4;
    const uint32_t HOOK_SET_PROPERTY    = 1 << 5;

    const uint32_t HOOK_ALL             = HOOK_CREATE_WRAPPER  |
                                          HOOK_CREATE_INSTANCE |
                                          HOOK_GET_SERVICE     |
                                          HOOK_CALL_METHOD     |
                                          HOOK_GET_PROPERTY    |
                                          HOOK_SET_PROPERTY    ;

    /**
    * For each of these hooks returning NS_OK means 'let the action continue'.
    * Returning an error code means 'veto the action'. XPConnect will return
    * JS_FALSE to the js engine if the action is vetoed. The implementor of this
    * interface is responsible for setting a JS exception into the JSContext
    * if that is appropriate.
    */

    void CanCreateWrapper(in JSContextPtr aJSContext,
                          in nsIIDRef aIID,
                          in nsISupports aObj,
                          in nsIClassInfo aClassInfo,
                          inout voidPtr aPolicy);

    void CanCreateInstance(in JSContextPtr aJSContext,
                           in nsCIDRef aCID);

    void CanGetService(in JSContextPtr aJSContext,
                       in nsCIDRef aCID);

    /*
     * Used for aAction below
     */
    const uint32_t ACCESS_CALL_METHOD  = 0;
    const uint32_t ACCESS_GET_PROPERTY = 1;
    const uint32_t ACCESS_SET_PROPERTY = 2;

    void CanAccess(in uint32_t aAction,
                   in nsAXPCNativeCallContextPtr aCallContext,
                   in JSContextPtr aJSContext,
                   in JSObjectPtr aJSObject,
                   in nsISupports aObj,
                   in nsIClassInfo aClassInfo,
                   in jsid aName,
                   inout voidPtr aPolicy);
};
